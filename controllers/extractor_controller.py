from fastapi import APIRouter, UploadFile, File, Form, HTTPException
from typing import Optional, List, Dict
import os, shutil, uuid
import pandas as pd

from data_processing.section_detector import detect_sections_auto
from data_processing.rule_memory import get_rule_for_fingerprint, get_fingerprint
from data_processing.rule_based_extractor import extract_sections_with_rule
from data_processing.chat_memory import memory
import time

# Session & models & validate
from common.session_store import SessionStore
from common.models import SessionData, Section
from data_processing.validators import to_one_based, validate_sections, IndexErrorDetail

router = APIRouter()
UPLOAD_DIR = "uploaded_files"
os.makedirs(UPLOAD_DIR, exist_ok=True)

store = SessionStore()


def _read_df(file_path: str, sheet_name: Optional[str] = None) -> pd.DataFrame:
    """
    ƒê·ªçc CSV/XLSX th√†nh DataFrame. ∆Øu ti√™n sheet_name n·∫øu l√† Excel.
    """
    ext = os.path.splitext(file_path)[1].lower()
    try:
        if ext == ".csv":
            return pd.read_csv(file_path)
        return pd.read_excel(file_path, sheet_name=sheet_name)
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file: {e}")


@router.post("/upload")
async def upload_file(
    file: UploadFile = File(...),
    user_id: Optional[str] = Form(None)
):
    """
    Nh·∫≠n file ƒë·∫ßu v√†o, l∆∞u th√†nh /uploaded_files/{session_id}.{ext}
    v√† kh·ªüi t·∫°o SessionData trong SessionStore.
    """
    ext = os.path.splitext(file.filename)[1].lower()
    if ext not in [".xlsx", ".xls", ".csv"]:
        raise HTTPException(status_code=400, detail="Ch·ªâ nh·∫≠n .xlsx/.xls/.csv")

    session_id = str(uuid.uuid4())
    saved_path = os.path.join(UPLOAD_DIR, f"{session_id}{ext}")

    try:
        with open(saved_path, "wb") as f:
            shutil.copyfileobj(file.file, f)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói l∆∞u file: {e}")

    # L∆∞u session (k√®m user_id n·∫øu c√≥)
    store.upsert(SessionData(session_id=session_id, user_id=user_id, file_path=saved_path))

    return {
        "ok": True,
        "code": "UPLOAD_OK",
        "data": {"session_id": session_id, "file_path": saved_path}
    }


@router.post("/preview")
async def preview(
    session_id: str = Form(...),
    sheet_name: Optional[str] = Form(None)
):
    """
    - L·∫•y session & ƒë·ªçc d·ªØ li·ªáu
    - ∆Øu ti√™n √°p RULE (theo user_id + fingerprint). Kh√¥ng c√≥ rule (ho·∫∑c rule kh√¥ng match) th√¨ detect auto
    - Chu·∫©n h√≥a & validate 1-based
    - L∆∞u auto_sections v√†o SessionStore
    """
    # 1) L·∫•y session
    data = store.get(session_id)
    if not data:
        raise HTTPException(status_code=404, detail=" Session kh√¥ng t·ªìn t·∫°i")

    # 2) ƒê·ªçc d·ªØ li·ªáu
    df = _read_df(data.file_path, sheet_name=sheet_name)
    if df.shape[0] == 0:
        raise HTTPException(status_code=400, detail="File/sheet r·ªóng")

    # 3) D√≤ sections (∆∞u ti√™n rule ƒë√£ h·ªçc ‚Üí kh√¥ng c√≥/kh√¥ng match th√¨ auto)
    uid = getattr(data, "user_id", None) or "default_user"

    # T∆∞∆°ng th√≠ch 2 phi√™n b·∫£n get_fingerprint (c√≥/kh√¥ng c√≥ sheet_name)
    try:
        fp = get_fingerprint(df, sheet_name=sheet_name)
    except TypeError:
        fp = get_fingerprint(df)

    rule = None
    try:
        rule = get_rule_for_fingerprint(fp, user_id=uid)
    except Exception:
        # an to√†n: n·∫øu ƒë·ªçc rule l·ªói th√¨ coi nh∆∞ kh√¥ng c√≥ rule
        rule = None

    used_rule = False
    try:
        if rule:
            sections = extract_sections_with_rule(df, rule) or []
            if len(sections) > 0:
                used_rule = True
            else:
                # üîÅ FALLBACK: rule kh√¥ng cho section n√†o ‚Üí quay v·ªÅ auto
                sections = detect_sections_auto(df)
        else:
            sections = detect_sections_auto(df)
    except Exception:
        # N·∫øu extractor ph√°t sinh l·ªói ‚Üí fallback auto
        sections = detect_sections_auto(df)

    # 4) CHU·∫®N H√ìA + VALIDATE 1-based
    try:
        sections = to_one_based(sections, nrows=df.shape[0])
        sections = validate_sections(sections, nrows=df.shape[0])
    except IndexErrorDetail as ie:
        # Tr·∫£ m√£ l·ªói & th√¥ng tin chi ti·∫øt index
        return {"ok": False, "code": ie.code, "error": str(ie)}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Sections kh√¥ng h·ª£p l·ªá: {e}")

    # 5) L∆ØU auto_sections v√†o session (Pydantic ‚Üí r√†ng bu·ªôc ch·∫∑t)
    data.auto_sections = [Section(**s) for s in sections]
    # Ghi l·∫°i user_id (n·∫øu tr∆∞·ªõc ƒë√≥ null) ƒë·ªÉ l·∫ßn sau tra ƒë√∫ng kho rule theo user
    if not getattr(data, "user_id", None):
        try:
            data.user_id = uid
        except Exception:
            pass
    store.upsert(data)

    memory.add_record(uid or "anonymous", {
        "event": "preview",
        "session_id": session_id,
        "used_rule": bool(used_rule),
        "sections_count": len(sections),
        "nrows": int(df.shape[0]),
        "timestamp": int(time.time())
    })


    # 6) Tr·∫£ v·ªÅ: lu√¥n k√®m nrows + used_rule ƒë·ªÉ client d·ªÖ debug
    return {
        "ok": True,
        "code": "PREVIEW_OK",
        "data": {
            "auto_sections": sections,
            "nrows": int(df.shape[0]),
            "used_rule": used_rule
        }
    }

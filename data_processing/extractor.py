# extractor.py
import os
import json
import pandas as pd
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def read_excel_as_markdown(file_path):
    df = pd.read_excel(file_path)
    df = df.dropna(how='all')
    if len(df) > 100:
        df = df.head(100)
    return df.to_markdown(index=False), df.columns.tolist()

def extract_rule_with_gpt(file_path: str, user_feedback: str = ""):
    markdown_table, headers = read_excel_as_markdown(file_path)
    prompt = f"""
T√¥i g·ª≠i b·∫°n b·∫£ng d·ªØ li·ªáu Excel d∆∞·ªõi d·∫°ng markdown:

{markdown_table}

Ng∆∞·ªùi d√πng g√≥p √Ω: {user_feedback}

üéØ H√£y ph√¢n t√≠ch b·∫£ng v√† r√∫t ra quy t·∫Øc nh·∫≠n bi·∫øt c√°c v√πng d·ªØ li·ªáu (sections).
‚úÖ Tr·∫£ v·ªÅ 1 JSON object c√≥ d·∫°ng:
{{
  "start_keywords": ["..."],
  "end_keywords": ["..."],
  "label_keywords": {{
    "ch·ª©a '...'" : "t√™n nh√£n"
  }}
}}

‚ö†Ô∏è Kh√¥ng chia b·∫£ng tr·ª±c ti·∫øp. Ch·ªâ suy lu·∫≠n quy t·∫Øc. Kh√¥ng th√™m m√¥ t·∫£ hay markdown.
"""

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "B·∫°n l√† AI chuy√™n h·ªçc quy t·∫Øc t·ª´ b·∫£ng d·ªØ li·ªáu Excel."},
            {"role": "user", "content": prompt}
        ]
    )
    text = response.choices[0].message.content.strip().strip("` \n")
    if text.startswith("json"):
        text = text.replace("json", "", 1).strip()
    return json.loads(text)
